{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["rank","MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","then","response","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kUAMIA,SAAK,GAmET,SAASC,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC5B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAItD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACnB,OACER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,GA4BrBC,MAhFf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACrC,OACEZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,IADtC,MAGAJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,YAkDVP,EAlDU,KAAoBS,GADxB,IAEIJ,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACfL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCwCTC,6MA9EbC,MAAQ,KAmCRC,cAAgB,WAYd,OAXeC,EAAKF,MAAMG,OAAOb,IAAI,SAAAc,GAGnC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CACLxB,MAAOuB,EAAME,cACb/B,OAAQ6B,EAAMG,mBACdf,IAAKY,EAAMI,GACXpB,OAAQgB,EAAMhB,OACdC,SAAUe,EAAMf,gBAMtBoB,gCAAa,SAAAC,IAAA,IAAAP,EAAA,OAAAQ,EAAAjC,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACWb,EAAKc,WADhB,OACLb,EADKU,EAAAI,KAEXf,EAAKgB,SAAS,CACZf,WAHS,wBAAAU,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WACT,OAAOK,MAAM,iEAGZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAE1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKtB,SACvBuB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFAhC1BP,KAAKX,8CAoCE,IACAN,EAAUiB,KAAKpB,MAAfG,OACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAWqB,EAAS,MAAQ,gBAC9BiB,KAAKpB,MAAMG,OAASiB,KAAKnB,gBAAkB,UAD9C,YA7EY6B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.32920236.chunk.js","sourcesContent":["// import React, { Component } from 'react';   functional컴포넌트로 변경했기 때문에 component 삭제\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types'; // node에서 yarn add prop-types 설치하고 import\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\nvar rank=0;\r\n\r\n// class Movie extends Component{   // smart컴포넌트와 dumb컴포넌트의 차이는 state가 있고 없고 차이이다.\r\n//   // 부모 컴포넌트로부터 받는 데이터 타입 설정 ,\r\n//   // isRequired : movie컴포넌트는 title이라는 prop을 제공하는 것이 필수이다.\r\n//   // App.js(부모)가 title={movie.title} 제공 안해주면 워링 뜸\r\n//   static propTypes = {\r\n//     title: PropTypes.string.isRequired,\r\n//     poster: PropTypes.string.isRequired\r\n//   }\r\n//\r\n//   render(){\r\n//     {/*console.log(this.props); */}\r\n//     return(\r\n//       <div>\r\n//         <MoviePoster poster={this.props.poster}/>\r\n//         <h1>{this.props.title}</h1> { /*JSX의 경우 명령을 실행시키려면 중괄호를 꼭 쳐야한다. */}\r\n//       </div>\r\n//     )\r\n//   }\r\n// }\r\n\r\n// 위의 class Movie컴포넌트를 functional컴포넌트로 변경\r\nfunction Movie({title, poster, genres, synopsis}){  // props이름을 title, poster라고 지음,\r\n  return (\r\n    <div className=\"Movie\">\r\n        <div className=\"Movie__Column\">\r\n            <MoviePoster poster={poster} alt={title}/>  {/* class가 아니니까 this.props.poster가 아님, functional컴포넌트에선 this props를 삭제해야 함 */}\r\n        </div>\r\n        <div className=\"Movie__Column\">\r\n            <h1>{MovieRank()}. {title}</h1> {/* JSX의 경우 명령을 실행시키려면 중괄호를 꼭 쳐야한다. */}\r\n            <div>Genre</div>\r\n            <div className=\"Movie__Genres\">\r\n                {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n            </div>\r\n            <div>Content</div>\r\n            <div className=\"Movie__Synopsis\">\r\n            <LinesEllipsis\r\n                text={synopsis}\r\n                maxLine='5'\r\n                ellipsis='...'\r\n                trimRight\r\n                basedOn='letters'\r\n                />\r\n            </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// class MoviePoster extends Component{  //아래에 작성한 stateless functional component와 같음\r\n//   // 여기서는 MoviePoster의 부모(Movie) 컴포넌트에게서 받는 정보를 체크하는 거임\r\n//   // poster의 type은 string이고, 필수요건이다.\r\n//   static propTypes = {\r\n//     poster: PropTypes.string.isRequired\r\n//   }\r\n//\r\n//   render(){\r\n//     {/*console.log(this.props); */}\r\n//     return(\r\n//       <img src={this.props.poster} alt=\"img\" />\r\n//     )\r\n//   }\r\n// }\r\n\r\n// 이 component는 component will mount, function, update state, .. 필요가 없음, 한개의 props만 있으면 됨\r\n// 단지 return을 하기위해 존재함. 그리고 state가 없다는 것을 기억~!!! 그리고 function render와 라이프사이클도 없음!!\r\nfunction MoviePoster({poster, alt}){   // stateless functional component = dumb컴포넌트 임\r\n  return (\r\n    <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/> // function 컴포넌트는 클래스가 아니기 때문에 this.props. 지우고 poster만 남김\r\n  )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n  return (\r\n    <span className=\"Movie__Genre\">{genre}</span>\r\n  )\r\n}\r\n\r\nfunction MovieRank(){\r\n  rank++;\r\n  return rank //(<span className=\"Movie__Rank\">{rank}</span>)\r\n}\r\n\r\n// Movie컴포넌트 prop types 확인방법\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.array.isRequired,\r\n  synopsis: PropTypes.string.isRequired\r\n}\r\n\r\n// MoviePoster컴포넌트 prop types 확인방법\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes = {\r\n  genre: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Movie\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nclass App extends Component {\r\n\r\n  // Render : componentWillMount() -> render() -> componentDidMount()\r\n  // Update : componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\r\n\r\n  //state : 컴포넌트 내부에서 선언하며 내부에서 값을 변경 할 수 있다, 리액트 컴포넌트 안에 있는 Object이다.\r\n  state = {}\r\n  // componentDidMount(){\r\n  //   setTimeout(() => {  // = setTimeout(function() {  컴포넌트가 mount되면 3초를 기다리고, movies 내용 추가\r\n  //     this.setState({\r\n  //       movies: [\r\n  //         {\r\n  //           title: \"Matrix\",\r\n  //           poster: \"https://upload.wikimedia.org/wikipedia/en/c/c1/The_Matrix_Poster.jpg\"\r\n  //         },\r\n  //         {\r\n  //           title: \"Full Metal Jacket\",\r\n  //           poster: \"https://images-na.ssl-images-amazon.com/images/I/41MN0ANVJTL.jpg\"\r\n  //         },\r\n  //         {\r\n  //           title: \"Oldboy\",\r\n  //           poster: \"https://www.nautiljon.com/images/asian-movie/00/23/old_boy_132.jpg\"\r\n  //         },\r\n  //         {\r\n  //           title: \"Star Wars\",\r\n  //           poster: \"https://vignette.wikia.nocookie.net/starwars/images/c/c5/Lego-all-stars-promo.jpg/revision/latest?cb=20181026172220\"\r\n  //         },\r\n  //         {\r\n  //           title: \"Trainspotting\",\r\n  //           poster: \"https://resizing.flixster.com/Yqx4Y2kFbZGsvo4vc_VQaamlPiw=/300x300/v1.bjs1NTQ3OTM7ajsxNzg3MTsxMjAwOzIwMDA7MTMzMQ\"\r\n  //         }\r\n  //       ]\r\n  //     })\r\n  //   }, 3000) //3초\r\n  // }\r\n\r\n  // https://yts.am/api(YTS토렌트 영화)에서 데이터베이스를 가져올거임\r\n  componentDidMount(){\r\n    this._getMovies(); // 이렇게 쓰는 이유는 사이즈가 크면 좋은 코딩방법이 아니다. 왜냐면 많은 function을 불러올건데 몰아있는것보다 분기 된 것이 좋다\r\n  }\r\n\r\n  _renderMovies = () => {   // 함수앞에 _ 붙이는 이유 : 리액트 자체 함수가 많기 때문에 자신이 만든 함수랑 구분 짓기 위해서임\r\n    const movies = this.state.movies.map(movie =>{  // key값으로 index를 준다. index 0부터 시작\r\n      //console.log(movie)\r\n      // 이전까지는 movie오브젝트를 만들었지만 json data에 맞게끔 이름 변경. 그리고 key를 index에서 id로 변경. 컴포넌트 key를 인덱스로 사용하면 느려서 좋지 않다.\r\n      return <Movie\r\n        title={movie.title_english}\r\n        poster={movie.medium_cover_image}\r\n        key={movie.id}\r\n        genres={movie.genres}\r\n        synopsis={movie.synopsis}\r\n      />\r\n    })\r\n    return movies\r\n  }\r\n\r\n  _getMovies = async () => { // async비동기= 이전작업이 끝날때까지 기다리는 것이 아니다. async를 안쓰면 await가 작동하지 않는다.\r\n    const movies  = await this._callApi()  // await는 성공적인 수행이 아니라 단지 끝나기를 기다리는 거다. _callApi가 완료되지 않으면 다음줄 실행되지 않는다.\r\n    this.setState({\r\n      movies   // <- 요즘 자바스크립트..  = movies : movies\r\n    })\r\n  }\r\n\r\n  _callApi = () => {  // _callApi는 fetch Promises를 리턴할거라서 fetch 앞에 return 을 붙인다.\r\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count') // fetch : url을 AJAX로 간단하게 불러올 수 있어서 좋음\r\n    // then()은 위의 작업이 성공적인 수행이 아니더라도 작업이 완료되면, then()을 불러온다. then() 다음에 .catch()를 생성하고 error를 출력해라. (Promises)\r\n    // .then(response => console.log(response))  // response 이름은 자유롭게 작명가능, 콘솔에서 보면 body가 ReadableStream으로 되어있다.이것은 2진수이며 JSON형식으로 바꿔야한다.\r\n    .then(response => response.json())  // then function은 1개의 attribute만 있다.\r\n    //.then(json => console.log(json))\r\n    .then(json => json.data.movies) // 바로 윗줄 콘솔로그를 개발도구로 보면 json데이터에 data안에 movies값이 있다. 이것을 리턴한다.\r\n    .catch(err => console.log(err)) // = .catch(function(err){console.log(err)}) 위의 라인에 에러가 있으면 error를 보여줘라\r\n  }\r\n\r\n  // 컴포넌트가 리액트 세계에 '존재'하게 되었음을 알게되었다.\r\n  render() {\r\n    const {movies} = this.state;\r\n    return (\r\n      <div className={movies ? \"App\" : \"App--loading\"}>\r\n        {this.state.movies ? this._renderMovies() : 'Loading'} {/*찾고 있는 데이터(this.state.movies)가 있는지 확인 */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}